name: SonarQube Analysis

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  sonarQube:
    runs-on: ubuntu-latest

    steps:
      # Paso 1: Clonar el código fuente
      - name: Checkout Code
        uses: actions/checkout@v2

      # Paso 2: Detectar el lenguaje y configurar el análisis
      - name: Detect Language
        run: |
          if [ -f "pom.xml" ]; then
            echo "language=java" >> $GITHUB_ENV
          elif [ -f "package.json" ]; then
            echo "language=javascript" >> $GITHUB_ENV
          elif [ -f "requirements.txt" ] || ls *.py 1> /dev/null 2>&1; then
            echo "language=python" >> $GITHUB_ENV
          elif [ -f "Makefile" ] || ls *.c *.cpp 1> /dev/null 2>&1; then
            echo "language=cpp" >> $GITHUB_ENV
          elif [ -f "go.mod" ]; then
            echo "language=go" >> $GITHUB_ENV
          elif [ -f "composer.json" ]; then
            echo "language=php" >> $GITHUB_ENV
          elif ls *.csproj 1> /dev/null 2>&1; then
            echo "language=dotnet" >> $GITHUB_ENV
          else
            echo "language=unknown" >> $GITHUB_ENV
          fi

      # Paso 3: Instalar SonarQube Scanner
      - name: Install SonarQube Scanner
        run: |
          curl -Ls https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-5.0.1.3006-linux.zip -o sonar-scanner.zip
          unzip sonar-scanner.zip
          echo "$(pwd)/sonar-scanner-5.0.1.3006-linux/bin" >> $GITHUB_PATH

      # Paso 4: Ejecutar el análisis de SonarQube
      - name: Run SonarQube Scan
        run: |
          case "$language" in
            java)
              mvn -B clean verify sonar:sonar -Dsonar.host.url=$SONAR_HOST_URL -Dsonar.login=$SONAR_TOKEN
              ;;
            javascript)
              npx sonarqube-scanner -Dsonar.projectKey=my-node-project -Dsonar.sources=src -Dsonar.host.url=$SONAR_HOST_URL -Dsonar.login=$SONAR_TOKEN
              ;;
            python)
              sonar-scanner -Dsonar.projectKey=my-python-project -Dsonar.sources=. -Dsonar.host.url=$SONAR_HOST_URL -Dsonar.login=$SONAR_TOKEN
              ;;
            cpp)
              build-wrapper-linux-x86-64 --out-dir bw-output make
              sonar-scanner -Dsonar.projectKey=my-cpp-project -Dsonar.sources=. -Dsonar.cfamily.build-wrapper-output=bw-output -Dsonar.host.url=$SONAR_HOST_URL -Dsonar.login=$SONAR_TOKEN
              ;;
            go)
              sonar-scanner -Dsonar.projectKey=my-go-project -Dsonar.sources=. -Dsonar.host.url=$SONAR_HOST_URL -Dsonar.login=$SONAR_TOKEN
              ;;
            php)
              sonar-scanner -Dsonar.projectKey=my-php-project -Dsonar.sources=. -Dsonar.host.url=$SONAR_HOST_URL -Dsonar.login=$SONAR_TOKEN
              ;;
            dotnet)
              dotnet build
              dotnet sonarscanner begin /k:"my-dotnet-project" /d:sonar.login=$SONAR_TOKEN /d:sonar.host.url=$SONAR_HOST_URL
              dotnet build
              dotnet sonarscanner end /d:sonar.login=$SONAR_TOKEN
              ;;
            *)
              echo "No supported language detected!"
              exit 1
              ;;
          esac

      # Paso 5: Descargar el informe de SonarQube y guardarlo como artefacto
      - name: Download SonarQube Report
        run: |
          curl -L -u $SONAR_TOKEN: $SONAR_HOST_URL/api/project_branches/list?project=$GITHUB_REPOSITORY > sonar-report.json
        continue-on-error: true

      # Paso 6: Subir el informe como artefacto a GitHub
      - name: Upload SonarQube Report as Artifact
        uses: actions/upload-artifact@v2
        with:
          name: sonar-report
          path: sonar-report.json

